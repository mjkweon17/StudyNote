템플릿
    -함수와 클래스가 제네릭형과 동작할 수 있게 도와줌.
    -함수나 클래스가 개별적으로 다시 작성하지 않고도 각기 다른 수많은 자료형에서 동작할 수 있게 해줌

표준 템플릿 라이브러리(STL)

    -네 가지 구성 요소를 제공: 알고리즘, 컨테이너, 함수자, 반복자

    -스탠다드하기 때문에 어떠한 환경에서도 사용 가능
    -직접 구현할 필요없이 제공해주는 기능을 사용하면 됨
    -자료구조, 알고리즘을 배울 때 STL을 사용하면 내부 알고리즘도 알 수 있음
    -STL을 사용하는 것이 트렌드
    -회사가 STL을 사용하지 않고 템플릿 라이브러리를 자체적으로 만들어 사용할 수도 있음. 그러나 소규모 회사에서는 템플릿 라이브러리를 사용할 경우 라이브러리를 만든 사람이 퇴사할 경우 다른 사람들이 유지보수를 하지 못함.

    -제네릭 프로그래밍, 효율성을 잃지 않은 추상화, 폰 노이만 구조, 밸류 시멘틱스(value semantics)를 기초로 함

    컨테이너
        -데이터를 저장하는 객체
        -STL은 연속 컨테이너들과 연관 컨테이너들을 포함함
            -표준 연속 컨테이너: vector, deque, list
            -표준 연관 컨테이너: set, multiset, map, multimap, hash_set, hash_map, hash_multiset, hash_multimap
        -container adaptors: 다른 컨네이너들을 구현으로서 사용하면서 특정한 인터페이스와 함께하는 컨테이너
            -queue, priority_queue, stack

        -벡터
            -동적 배열 구조를 C++로 구현한 것
            -C의 배열(빠른 랜덤 접근이 가능함)처럼 행동하지만 자동으로 배열의 크기 조절과 객체의 추가와 삭제가 가능함
            -어떤 타입이라도 저장할 수 있지만 한 번에 한 타입만 저장 가능
            -배열은 메모리에서 연속적
            -템플릿 클래스이기 때문에, 원하는 모든 타입의 일반적인 배열(generic array)를 만들 수 있음
                -모든 것을 배열처럼 사용할 수 잇게 해줌
                -벡터의 벡터도 만들 수 있음
            -벡터는 무조건 데이터를 선형적으로 만들려고 함
                -저장 공간보다 많은 양의 데이터를 추가할 경우, 현재 보유하고 있는 메모리의 두 배만큼을 할당함.
                -과거에는 메모리의 크기가 늘어날 때마다 선형적인 다른 공간에 모든 원소를 하나하나 복사하기 때문에 속도가 느렸음 (큰 복사)
                -그러나 C++11에서는 메모리 상에서의 이동이 이뤄져서 속도가 향상됨
            
    반복자 (iterator)
        -input iterators: 값들의 시퀀스를 읽는데 사용됨
        -output iterators: 값들의 시퀀스를 쓰는데 사용됨
        -forward iteratros: 읽어지고 쓰여지며 앞으로 움직일 수 있음
        -bidirectional iterators: forward iterators와 같지만 뒤로도 움직일 수 있음.
        -random access iterators: 한 연산에서 어떤 수만큼이라도 자유롭게 움직일 수 있음

        -vector는 random access iterator를 가질 수 있지만, 리스트는 오직 bidirectional iterator만 가질 수 있음

        -STL의 일반성을 가능케 하는 중요한 특징
        



C++ 표준 라이브러리
    -여러 제네릭 컨테이너들, 함수 객체, 제네릭 문자열, 스트림(인터렉티브와 파일 입출력을 포함하는), 몇몇 언어 특징 그리고 숫자의 제곱근을 찾는 것 같은 작업을 위한 모든 함수들을 활용하기 위한 함수들을 제공
    -.h로 끝나는 함수들을 사용할 수 있기만 권장되지는 않음
    -std 이름공간 내에 선언됨
    -STL에 의해 도입된 관습에 기반함
    -제네릭 프로그래밍과 STL의 개발자들의 연구에 영향을 받음
    -제네릭 알고리즘의 성능의 요구에 가치를 둠

이름공간 (namespace)
    -개체를 구분할 수 있는 범위를 나타내는 말
    -하나의 이름 공간에서는 하나의 이름이 단 하나의 개체만을 가리키게 됨

덱(deque, double-ended queue)
    -양쪽 끝에서 삽입과 삭제가 모두 가능한 자료 구조의 한 형태
    -두 개의 포인터를 사용하여 양쪽에서 삭제와 삽입을 발생시킬 수 있음.
    -큐와 스택을 합친 형태

템플릿
    -C++ 프로그래밍 언어의 한 기능
    -함수와 클래스가 제네릭형을 동작할 수 있게 도와줌
    -완전 튜링 언어
    -다중 상속과 연산자 오버로딩과 결합할 때 프로그래머들에게 유용함

    -함수 템플릿
        template <typename Type>
        Type max(Type a, Type b) {
            return a > b ? a : b;
        }

    -클래스 템플릿
        -클래스를 템플릿 변수에 따라 생성할 수 있게 하는 기능

    -변수 템플릿

인스턴스
    -OOP에서 인스턴스는 해당 클래스의 구조로 컴퓨터 저장공간에서 할당된 실체를 의미
        -클래스는 속성과 행위로 구성된 일종의 설계도
        -객체는 클래스와 인스턴스를 포함한 개념


제네릭 프로그래밍
    -데이터 형식에 의존하지 않고, 하나의 값이 여러 다른 데이터 타입들을 가질 수 있는 기술에 중점을 두어 재사용성을 높일 수 있는 프로그래밍 방식


튜링 완전(turing completeness)
    -어떤 프로그래밍 언어나 추상 기계가 튜링 기게와 동일한 계산 능력을 가짐
    -튜링 기계로 풀 수 있는 문제(계산적인 문제)를 풀 수 있는 프로그래밍 언어나 추상 기계

추상 기계 (abstract machine)
    -aka 추상 컴퓨터
    -컴퓨터 하드웨어나 소프트웨어의 이상적인 모형

튜링 기계 (튜링 머신)

    -실존하는 기계가 아님
    -테이프(메모리): 기호 하나를 읽고 쓸 수 있는 셀이 무한히 연결된 기억 장치
    -헤드(CPU): 현재 위치한 셀을 읽고 쓰거나 좌우로 이동할 수 있는 제어 장치
    -기호집합(정보: 숫자, 문자, 그림...): 테이프에 읽고 쓸 수 있는 기호들의 집합
    -상태 집합: 튜링 머신이 가질 수 있는 상태들의 집합
    -명령 테이블: 어떤 상태와 기호에 따라 해야 할 일을 지정하는 명령 목록

    불완정성 정리
        기계적인 방식으로 모든 수학적 명제를 도출할 수 없다

    -긴 테이프에 쓰여잇는 여러 가지 기호들을 일정한 규칙에 따라 바꾸는 기계
    -적당한 규칙과 기호를 입력하면 일반적인 컴퓨터의 알고리즘 수행 가능
    -튜링 머신을 설계하면 이론적으로 계산 가능한 모든 것을 할 수 있음.
    -클로드 섀넌: 정보의 최소 단위는 비트. 모든 정보는 0과 1로 표현 가능하다고 함.
    -튜링 머시는 0을 1로, 1을 0으로 바꿀 수 있기 때문에 부울대수 (and, or, not) 모두 가능. 부울대수 가능하기 때문에 사칙 연산이 가능하고, 사칙 연산이 가능하면 모든 연산이 가능. 따라서 범용적(보편적)이기 때문에 앨런 튜링은 모든 정보를 처리할 수 있는 기계를 만듬.
    -유니버셜 튜링 머신(UTM)
        -임의의 튜링 머신M의 명령 테이블을 보고 그것을 따라하는 튜링 머신

    -튜링 머신(응용프로그램), 유니버셜 튜링 머신(운영체제), 헤드(CPU), 테이프(메모리)

    -존 폰 노이만: 튜링 머신을 가지고 UTM 체계의 아키텍쳐를 설계함.
    -튜링 머신은 상태에 따라 움직이는데 이는 너무 어려움. 폰 노이만의 아키텍쳐는 절차(procedure) 중심. 

    -응용 프로그램(튜링 머신)과 CPU(OS)는 앨런 튜링이 말한 무한대의 메모리를 달성하지 못함.
    -그래서 앨런 튜링이 인공지능에 대해 얘기함. 인간의 뇌가 동작하는 것과 같이 아키텍쳐를 만들어서 원래의 튜링 머신으로 복원하면 인공지능(유발 하라리가 말하는 호모 데우스)을 만들 수 있음.

    -실제 컴퓨터가 연산할 수 있다면 튜링 기계도 마찬가지이다. 따라서 튜링 기계의 한계는 실제 컴퓨터에도 적용된다
    
오토마타
    -aka 자동기계
    -스스로 작동하는 기계
    -현대에서는 자동 제어 기계를 부를 때 쓰기도 함