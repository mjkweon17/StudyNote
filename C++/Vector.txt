[Vector]

-Vector Container는 자동으로 메모리가 할당되는 배열
-template을 사용하기 때문에 데이터 타입은 마음데로 넣을 수 있음
-중간에 값을 삽입하거나 삭제할 수도 있지만 배열 기반이서 삽입 삭제가 빈번하게 일어나면 비효율적

-선언 : vector<[data type]> [변수이름]
    vector<int> v;

-vector의 생성자와 연산자
    -vector<int> v;
        비어있는 vector v생성
    -vector<int> v(5);
        기본값(0)으로 초기화 된 5개의 원소를 가지는 vector v 생성
    -vector<int> v(5, 2);
        2로 초기화된 5개의 원소를 가지는 vector v 생성
    -vector<int> v2(v1);
        v2는 v1 vector를 복사해서 생성
    -v1, v2 vector의 내부에 인자가 있을 경우 비교 연산자를 사용해서 대소 비교 가능

-vector의 멤버 함수
    -v.assign(5,2);
        2의 값으로 5개의 원소 할당
    -v.at(index);
        index번째 원소를 참조
        v[index] 보다 속도는 느리지만, 범위를 점검하므로 더 안전함
    -v[index]
        index번째 원소를 참조
        범위를 점검하지 않으므로 속도가 빠름
    -v.front()
        첫번째 원소를 참조
    -v.back()
        마지막 원소를 참조
    -v.clear();
        모든 원소를 제거
        원소만 제거하고 메모리는 그대로 남아있음
        size만 줄어들고 capacity는 그대로
    -v.push_back(7)
        마지막 원소 뒤에 7을 삽임
    -v.pop_back();
        마지막 원소를 제거
    -v.begin();
        첫번째 원소를 가리킴 (iterator와 사용)
    -v.end();
        마지막의 다음을 가리킴 (iterator와 사용)
    -v.rbegin();
        reverse begin (거꾸로 해서 첫번째 원소를 가리킴)
        (iterator와 사용)
    -v.rend();
        reverse end (거꾸로 해서 마지막의 다음을 가리킴)
        (iterator와 사용)
    -v.reserve(n);
        n개의 원소를 저장할 위치를 예약. 미리 동적할당 하는 것
    -v.resize(n);
        크기를 n으로 변경
        더 커지면 default값인 0으로 초기화
    -v.resize(n, 3);
        크기를 n으로 변경
        더 커졌을 경우 인자의 값을 3으로 초기화
    -v.size();
        원소의 개수를 리턴
    -v.capacity();
        할당된 공간의 크기를 리턴
    -v2.swap(v1);
        v1과 v2의 원소와 capacity 바꿔줌
        v1의 capacity를 없앨 때 사용하기도 함. 이때 vv2를 capacity가 0인 임시 객체로 만들어서 스왑을 해줌.
            vector<int>().swap(v1);
    -v.insert(2, 3, 4);
        2번째 위치에 3개의 4값을 삽입
    -v.insert(2,3);
        2번째 위치에 3의 값을 삽입
        삽입한 곳의 iterator 반환
    -v.erase(iter);
        iter가 가리키는 원소 제거
        size만 줄어들고 capacity는 그대로 남음
        erase는 파라미터 하나를 받을 때와 두개를 받을 때 다름.
    -v.empty()
        vector가 비었으면 return true;
        비어있다의 기준은 size가 0이라는 뜻. (capacity와는 무관함)
    
SIZE VS CAPACITY
    -capacity가 꽉 차면 기존의 capacity에서 2배로 공간을 할당함. 왜냐하면 push(back)이 일어날 때마다 동적할당을 하면 비효율적이기 떄문.
    -과거에는 원소의 개수가 증가해서 메모리가 더 필요해졌을 때 기존 위치에 메모리를 이어서 할당하는 것이 아니라 새롭게 메모리를 할당해서 원소들을 전부 복사하는 형식이어서 복사에 대한 비용이 많이 들었음.
    -지금은 std::move로 메모리를 증가시킬 때 복사하는 것이 아니라 이동하게 돼서 비용이 많이 줄어들었음

    -size: 할당된 메모리 안에 요소가 들어있는 것의 개수
    -capacity: 할당된 메모리의 개수
    

        